[
  {
    "path": "posts/2021-01-23-counting-in-time-intervals/",
    "title": "Counting in Time Intervals",
    "description": "Tackling the common task of counting concurrent events with start and end times in R.",
    "author": [
      {
        "name": "Kevin Kent",
        "url": {}
      }
    ],
    "date": "2021-01-23",
    "categories": [],
    "contents": "\nHave you ever had a dataset with start and end times for events where you wanted to know how many events were occuring simultaneously a given timestamp?\nThis has come up many times for me, both in my professional work as well as in questions on the R4DS slack community, where I am a mentor. I would guess that this is a common data wrangling problem for anyone working with this type of data.\nMotivating Example\nLet’s create a toy dataset of login and logout times, where we want to know how many users were logged in simultaneously during a given minute.\n\n\nlibrary(tidyverse)\nlibrary(lubridate)\nsource(here::here(\"imports.R\"))\n\nstarting_times <- seq(from = as_datetime(\"2021-01-01 00:00:00\"), \n                      to = as_datetime(\"2021-01-10 00:00:00\"), by = \"hour\")\n\nending_times <- seq(from = as_datetime(\"2021-01-10 00:00:00\"), \n                    to = as_datetime(\"2021-01-20 00:00:00\"), by = \"hour\")\n\nevent_data <- tibble(event_num = paste0(\"session_\", seq(1, 100, by = 1)), \n                     login = sample(starting_times, 100), logout =  sample(ending_times, 100))\n\n\n\nGenerate Datetime Sequence\nNow I’ll generate a datetime sequence for each login and logout event. The most straightforward way to do this is to map through each start and end time with the seq function.\n\n\nlibrary(purrr)\n\nevent_data_seq <- event_data %>%\n  mutate(dt_sequences = map2(login, logout, seq, by = \"hour\"))\n\n\n\nExpand\nThe next step is to expand or unnest these datetime sequences into a long format.\n\n\nevent_data_expanded <- event_data_seq %>%\n  unnest(dt_sequences) %>%\n  rename(dt = dt_sequences) %>%\n  select(event_num, dt)\n\nevent_data_expanded \n\n\n# A tibble: 22,403 x 2\n   event_num dt                 \n   <chr>     <dttm>             \n 1 session_1 2021-01-05 21:00:00\n 2 session_1 2021-01-05 22:00:00\n 3 session_1 2021-01-05 23:00:00\n 4 session_1 2021-01-06 00:00:00\n 5 session_1 2021-01-06 01:00:00\n 6 session_1 2021-01-06 02:00:00\n 7 session_1 2021-01-06 03:00:00\n 8 session_1 2021-01-06 04:00:00\n 9 session_1 2021-01-06 05:00:00\n10 session_1 2021-01-06 06:00:00\n# … with 22,393 more rows\n\nGreat! Now the dt column has all the minutes that each session was active expanded in a tidy format.\nVisualize\nLet’s see how many concurrent sessions there were over time.\n\n\nevent_data_expanded %>%\n  count(dt) %>%\n  ggplot(aes(dt, n)) + \n    geom_col() + labs(title = \"How many concurrent sessions were there over time?\",\n                      x = \"Time\", y = \"count\",\n                      caption = \"@kevin_m_kent\") + theme_me() \n\n\n\n\nThat’s it! I’d love to hear what you think and if you have another way of solving this problem.\n\n\n\n",
    "preview": "posts/2021-01-23-counting-in-time-intervals/counting-in-time-intervals_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2021-01-23T19:24:05-05:00",
    "input_file": "counting-in-time-intervals.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to Data Ramblings",
    "description": "My latest attempt at sharing useful data science tidbits. Hope you enjoy!",
    "author": [
      {
        "name": "Kevin Kent",
        "url": {}
      }
    ],
    "date": "2021-01-23",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2021-01-23T11:19:06-05:00",
    "input_file": {}
  }
]
